{
  "name": "mindmap-notes-backend",
  "version": "1.0.0",
  "description": "Backend API for MindMap Notes application with Google Drive and GitHub integration",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "lint": "eslint .",
    "setup": "node scripts/setup.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.5.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "googleapis": "^126.0.1",
    "@octokit/rest": "^20.0.1",
    "jsonwebtoken": "^9.0.2",
    "bcryptjs": "^2.4.3",
    "multer": "^1.4.5-lts.1",
    "helmet": "^7.0.0",
    "express-rate-limit": "^6.10.0",
    "compression": "^1.7.4",
    "validator": "^13.11.0",
    "nodemailer": "^6.9.4",
    "socket.io": "^4.7.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.6.2",
    "supertest": "^6.3.3",
    "eslint": "^8.47.0",
    "@types/node": "^20.5.0"
  },
  "engines": {
    "node": ">=16.0.0"
  },
  "keywords": [
    "mindmap",
    "notes",
    "api",
    "google-drive",
    "github",
    "collaboration"
  ],
  "author": "Your Name",
  "license": "MIT"
}

// .env.example file
// Copy this to .env and fill in your actual values

# Server Configuration
PORT=3001
NODE_ENV=development

# Database
MONGODB_URI=mongodb://localhost:27017/mindmap-notes

# JWT Secret for authentication
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# Google OAuth2 Configuration
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_REDIRECT_URI=http://localhost:3001/auth/google/callback

# Frontend URL (for CORS and redirects)
FRONTEND_URL=http://localhost:3000

# Email Configuration (for notifications)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# File Upload Configuration
MAX_FILE_SIZE=10485760
UPLOAD_PATH=./uploads

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

// scripts/setup.js - Database initialization script
const mongoose = require('mongoose');
const User = require('../models/User');
const Note = require('../models/Note');
require('dotenv').config();

async function setupDatabase() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('Connected to MongoDB');
    
    // Create indexes for better performance
    await Note.createIndexes();
    await User.createIndexes();
    
    console.log('Database indexes created');
    
    // Create default admin user if needed
    const adminExists = await User.findOne({ email: 'admin@mindmap.com' });
    if (!adminExists) {
      const adminUser = new User({
        email: 'admin@mindmap.com',
        name: 'Admin User',
        preferences: {
          autoSync: true,
          autoCommit: false,
          defaultColor: '#3B82F6'
        }
      });
      await adminUser.save();
      console.log('Default admin user created');
    }
    
    console.log('Database setup completed successfully');
    process.exit(0);
  } catch (error) {
    console.error('Database setup failed:', error);
    process.exit(1);
  }
}

setupDatabase();

// middleware/auth.js - Enhanced authentication middleware
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const authenticateToken = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      return res.status(401).json({ error: 'Access token required' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);
    
    if (!user) {
      return res.status(401).json({ error: 'User not found' });
    }

    req.user = user;
    req.userId = user._id.toString();
    next();
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ error: 'Token expired' });
    }
    return res.status(403).json({ error: 'Invalid token' });
  }
};

module.exports = { authenticateToken };

// utils/googleDrive.js - Google Drive utilities
const { google } = require('googleapis');

class GoogleDriveService {
  constructor() {
    this.oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
  }

  setUserCredentials(tokens) {
    this.oauth2Client.setCredentials(tokens);
    return google.drive({ version: 'v3', auth: this.oauth2Client });
  }

  async refreshTokenIfNeeded(user) {
    if (user.googleTokens && user.googleTokens.expires_at < new Date()) {
      try {
        this.oauth2Client.setCredentials({
          refresh_token: user.googleTokens.refresh_token
        });
        
        const { credentials } = await this.oauth2Client.refreshAccessToken();
        
        // Update user with new tokens
        user.googleTokens = {
          access_token: credentials.access_token,
          refresh_token: credentials.refresh_token || user.googleTokens.refresh_token,
          expires_at: new Date(credentials.expiry_date)
        };
        
        await user.save();
        return credentials;
      } catch (error) {
        throw new Error('Failed to refresh Google tokens');
      }
    }
    return user.googleTokens;
  }

  async createFolder(drive, name, parentId = null) {
    const folderMetadata = {
      name: name,
      mimeType: 'application/vnd.google-apps.folder',
      parents: parentId ? [parentId] : undefined
    };

    const folder = await drive.files.create({
      resource: folderMetadata,
      fields: 'id'
    });

    return folder.data.id;
  }

  async findOrCreateMindMapFolder(drive) {
    // Search for existing MindMap Notes folder
    const response = await drive.files.list({
      q: "name='MindMap Notes' and mimeType='application/vnd.google-apps.folder'",
      fields: 'files(id, name)'
    });

    if (response.data.files.length > 0) {
      return response.data.files[0].id;
    }

    // Create new folder if not found
    return await this.createFolder(drive, 'MindMap Notes');
  }
}

module.exports = GoogleDriveService;

// utils/github.js - GitHub utilities
const { Octokit } = require('@octokit/rest');

class GitHubService {
  constructor(token) {
    this.octokit = new Octokit({ auth: token });
  }

  async createRepository(name, description, isPrivate = true) {
    try {
      const { data } = await this.octokit.rest.repos.createForAuthenticatedUser({
        name: name,
        description: description,
        private: isPrivate,
        auto_init: true
      });
      return data;
    } catch (error) {
      if (error.status === 422) {
        // Repository already exists
        const { data } = await this.octokit.rest.repos.get({
          owner: error.response.data.errors[0].resource.split('/')[1],
          repo: name
        });
        return data;
      }
      throw error;
    }
  }

  async commitFile(owner, repo, path, content, message, sha = null) {
    const contentEncoded = Buffer.from(content).toString('base64');
    
    const params = {
      owner,
      repo,
      path,
      message,
      content: contentEncoded
    };

    if (sha) {
      params.sha = sha;
    }

    const { data } = await this.octokit.rest.repos.createOrUpdateFileContents(params);
    return data;
  }

  async getFile(owner, repo, path) {
    try {
      const { data } = await this.octokit.rest.repos.getContent({
        owner,
        repo,
        path
      });
      return data;
    } catch (error) {
      if (error.status === 404) {
        return null;
      }
      throw error;
    }
  }

  async createBranch(owner, repo, branchName, fromBranch = 'main') {
    // Get the SHA of the from branch
    const { data: refData } = await this.octokit.rest.git.getRef({
      owner,
      repo,
      ref: `heads/${fromBranch}`
    });

    // Create new branch
    await this.octokit.rest.git.createRef({
      owner,
      repo,
      ref: `refs/heads/${branchName}`,
      sha: refData.object.sha
    });
  }
}

module.exports = GitHubService;

// utils/websocket.js - Real-time collaboration
const socketIo = require('socket.io');

class WebSocketService {
  constructor(server) {
    this.io = socketIo(server, {
      cors: {
        origin: process.env.FRONTEND_URL,
        methods: ["GET", "POST"]
      }
    });

    this.setupEventHandlers();
  }

  setupEventHandlers() {
    this.io.on('connection', (socket) => {
      console.log('User connected:', socket.id);

      socket.on('join-room', (userId) => {
        socket.join(`user-${userId}`);
        console.log(`User ${userId} joined their room`);
      });

      socket.on('note-update', (data) => {
        socket.to(`user-${data.userId}`).emit('note-updated', data);
      });

      socket.on('note-create', (data) => {
        socket.to(`user-${data.userId}`).emit('note-created', data);
      });

      socket.on('note-delete', (data) => {
        socket.to(`user-${data.userId}`).emit('note-deleted', data);
      });

      socket.on('connection-create', (data) => {
        socket.to(`user-${data.userId}`).emit('connection-created', data);
      });

      socket.on('disconnect', () => {
        console.log('User disconnected:', socket.id);
      });
    });
  }

  notifyUserUpdate(userId, event, data) {
    this.io.to(`user-${userId}`).emit(event, data);
  }
}

module.exports = WebSocketService;
